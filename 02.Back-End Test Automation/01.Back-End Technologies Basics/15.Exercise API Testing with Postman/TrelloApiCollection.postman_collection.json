{
	"info": {
		"_postman_id": "f017c6b3-c4be-41f1-8e1a-e97ae07b8a3e",
		"name": "TrelloApiCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32754021"
	},
	"item": [
		{
			"name": "GetAllBoards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is less than 30 seconds\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function(){\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/members/me/boards?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateABoard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();   // Parse a response body as JSON\r",
							"\r",
							"pm.test(\"Board name is 'Learning Postman'\", function(){\r",
							"    pm.expect(responseData.name).to.equal(\"Learning Postman\");   // Assert name is as expected\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"boardId\", responseData.id);  // Set the board ID as a collection variable"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/?name=Learning Postman&key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "Learning Postman"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetASingleBoard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response body has property 'name' of type string equal to 'Learning Postman'\", function(){\r",
							"    pm.expect(responseData).to.have.property(\"name\");   // Check if the property 'name' exist\r",
							"    pm.expect(responseData.name).to.be.a(\"string\");     // Verify that 'name' property is of type string\r",
							"    pm.expect(responseData.name).to.be.equal(\"Learning Postman\");  // Check if 'name' is equal to \"Learning Postman\"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateAToDoList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response has all the expected properties\", function(){\r",
							"    pm.expect(responseData).to.have.all.keys(\"id\", \"name\", \"closed\", \"color\", \"idBoard\", \"pos\", \"type\", \"datasource\", \"limits\");   // Check all keys\r",
							"});\r",
							"\r",
							"pm.test(\"Response has some of the expected properties\", function(){\r",
							"    pm.expect(responseData).to.include.keys(\"id\", \"name\");                      // Check if this keys exist\r",
							"});\r",
							"\r",
							"pm.test(\"'closed' is false and of type boolean\", function(){\r",
							"    pm.expect(responseData.closed).to.be.a(\"boolean\");\r",
							"    pm.expect(responseData.closed).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"'idBoard' matches expected board ID\", function(){\r",
							"    var expectedBoardId = pm.variables.get(\"boardId\");           // Get the board ID from the current enviroment or collection variables\r",
							"    pm.expect(responseData.idBoard).to.be.equal(expectedBoardId);  // Compare the response's board ID with the expected one\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"ToDoListId\", responseData.id)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/lists?name=TO DO&idBoard={{boardId}}&key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "TO DO"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateAListWithUniqueName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();   // Define responseData variable to fix the ReferenceError\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List name mathes the unique name used in creation\", function(){\r",
							"    var expectedName = pm.collectionVariables.get(\"uniqueListName\");   // Retrive the saved unique name\r",
							"    \r",
							"    pm.expect(responseData.name).to.equal(expectedName);   // Assert the name match\r",
							"});\r",
							"console.log(\"responseData :\" , responseData);\r",
							"var uniqueListId = responseData.id;\r",
							"pm.collectionVariables.set(\"uniqueListId\", uniqueListId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate unique name for the list using a random number:\r",
							"// Option 1\r",
							"var uniqueName = \"List-\" + Math.floor(Math.random() * 1000);\r",
							"\r",
							"// Option 2\r",
							"// var uniqueName = \"List-\" + new Date().getTime();\r",
							"\r",
							"// Set this unique name as variable\r",
							"\r",
							"pm.collectionVariables.set(\"uniqueListName\", uniqueName);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/lists?name={{uniqueListName}}&idBoard={{boardId}}&key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{uniqueListName}}"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllLists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response array is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"     pm.expect(pm.response.json()).to.be.an('array');\r",
							"     pm.expect(pm.response.json().length).to.equal(5);\r",
							"});\r",
							"\r",
							"pm.test(\"List with specific name is present\", function(){\r",
							"    var listName = pm.response.json().map(list => list.name);\r",
							"    pm.expect(listName).to.include(pm.variables.get(\"uniqueListName\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}/lists?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateACard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();\r",
							"pm.collectionVariables.set(\"cardId\", responseData.id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Card name is correct\", function(){\r",
							"    pm.expect(responseData.name).to.equal(\"Sign-up for Trello\");\r",
							"});\r",
							"\r",
							"pm.test(\"Card is created in To Do list\", function(){\r",
							"    pm.expect(responseData.idList).to.equal(pm.collectionVariables.get(\"ToDoListId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Labels and attachments are empty\", function () {\r",
							"    pm.expect(responseData.labels).to.be.empty;\r",
							"    pm.expect(responseData.attachments).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/cards?name=Sign-up for Trello&idList={{ToDoListId}}&key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "name",
							"value": "Sign-up for Trello"
						},
						{
							"key": "idList",
							"value": "{{ToDoListId}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MoveCardToUniqueNameList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Card ID is correct\", function(){\r",
							"    pm.expect(responseData.id).to.equal(pm.collectionVariables.get(\"cardId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Card moved to the list with unique name\", function(){\r",
							"    pm.expect(responseData.idList).to.equal(pm.collectionVariables.get(\"uniqueListId\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/cards/{{cardId}}?idList={{uniqueListId}}&key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{uniqueListId}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteCard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"'Limits' property exist and is an object\", function(){\r",
							"    pm.expect(responseData).to.have.property(\"limits\");\r",
							"    pm.expect(responseData.limits).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"'Limits' object is empty\", function(){\r",
							"    pm.expect(Object.keys(responseData.limits)).to.have.lengthOf(0);\r",
							"    // pm.expect(responseData.limits).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/cards/{{cardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBoard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response '_value' is null\", function(){\r",
							"    pm.expect(responseData._value).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "ATTA975275a3e2d1649edd177c527a307754349ea1894afdf2f32275a1d7e8247f822DF5EE12"
		},
		{
			"key": "key",
			"value": "8ed881289e596c28950a8f3c1101262f"
		},
		{
			"key": "baseURL",
			"value": "https://api.trello.com",
			"type": "string"
		},
		{
			"key": "boardId",
			"value": "671e2f7d9cd714e6b2eb3a65",
			"type": "string"
		},
		{
			"key": "uniqueListName",
			"value": "List-70"
		},
		{
			"key": "uniqueListId",
			"value": "671e2f7eb483408737d8f5fd"
		},
		{
			"key": "ToDoListId",
			"value": "671e2f7d81ccccf58f775465"
		},
		{
			"key": "cardId",
			"value": "671e2f7e984daaa6a038f74d"
		}
	]
}