/*
По подразбиране повечето браузъри задават box-sizing: content-box. Това означава, че когато добавите padding или border, те се добавят извън размера на елемента (ширината и височината). Това поведение може да бъде неудобно за изчисленията.

С помощта на box-sizing: inherit:

Всички елементи унаследяват стойността на box-sizing, която може да бъде предварително зададена в основния елемент, например в html.
Това осигурява консистентност в начина, по който се изчисляват размерите на елементите.
*/

html {
    box-sizing: border-box; /* Гарантира, че padding и border се включват в общата ширина и височина на елемента */
}

.viewport {
    height: 25em; /* Определя височината на всеки .viewport на 25em (свързано с размера на шрифта) */
    width: auto; /* Широчината се определя автоматично въз основа на съдържанието или родителския контейнер */
    position: relative; /* Прави .viewport референтен блок за абсолютно позиционирани дъщерни елементи */
}

.viewport:nth-child(1) {
    background-image: linear-gradient(to right, #185a9d, #0085ca, #00adc8, #00d091, #3cea24); 
    /* Добавя линейно преливащ фон от синьо към зелено, преминаващ отляво надясно */
}

.viewport:nth-child(2) {
    background-image: linear-gradient(to right, #A83279, #C53764, #D6494C, #DB6532, #D38312); 
    /* Добавя линейно преливащ фон от розово към оранжево, преминаващ отляво надясно */
}

.card {
    background: cornflowerblue; /* Задава син цвят на фона на .card */
    position: absolute; /* Позиционира .card спрямо най-близкия позициониран родител (в случая .viewport) */
    display: block; /* Прави елемента блоково ниво (по подразбиране за <div>) */
    border-radius: 0.3rem; /* Закръгля ръбовете на елемента със стойност 0.3rem */
    overflow: hidden; /* Скрива съдържание, което излиза извън рамките на елемента */
    top: 50%; /* Позиционира елемента на 50% отгоре спрямо родителя */
    left: 50%; /* Позиционира елемента на 50% отляво спрямо родителя */
    transform: translate(-50%, -50%); /* Центрира елемента по хоризонталата и вертикалата */
}

.viewport .card {
    width: 15em; /* Определя фиксирана ширина от 15em за картата */
    aspect-ratio: 16 / 9; /* Поддържа пропорцията 16:9 (широчина спрямо височина) за картата */
}

.viewport:nth-child(2) .card {
    aspect-ratio: 2 / 3; /* Поддържа пропорцията 2:3 (широчина спрямо височина) за картата */
}

.viewport .card img {
    width: 100%; /* Изображението заема цялата ширина на родителя */
    height: auto; /* Автоматично определя височината, за да запази пропорциите на изображението */
    display: block; /* Премахва допълнителното пространство под изображението */
    position: absolute; /* Абсолютно позиционира изображението в рамките на .card */
    top: 50%; /* Позиционира изображението на 50% отгоре спрямо .card */
    left: 50%; /* Позиционира изображението на 50% отляво спрямо .card */
    transform: translate(-50%, -50%); /* Центрира изображението по хоризонталата и вертикалата */
}

.card img {
    display: block; /* Установява изображението като блоков елемент */
}
